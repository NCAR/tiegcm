#!/usr/bin/env python3
import sys, os, shutil, argparse

#-----------------------------------------------------------------------
def replace_string(file, oldstr, newstr):
    '''Replace all occurrences of "oldstr" in file with "newstr".'''

    with open(file, 'r') as file_read:
        contents = file_read.read()

    with open(file, 'w') as fw:
        fw.write(contents.replace(oldstr, newstr))

#-----------------------------------------------------------------------

description = '''\
Change namelist comment character from ";" to "!" in input file(s).

If the -overwrite option is NOT set, user is prompted for whether or 
not to overwrite the input files.
If the -overwrite option IS set (yes or no), then the option will be
honored, and the user will NOT be prompted.
If input files are not overwritten, files with a '.new' suffix 
added to the original file name will be written with the comment 
character changed.
'''

epilog = '''\
Example 1:
  change_nlcomment tiegcm.inp mynamelist.inp
  (User will be prompted whether or not to overwrite each input file)
Example 2:
  change_nlcomment -overwrite=no *.inp  
  (Files will be NOT be overwritten without prompting the user)
Example 3:
  change_nlcomment -overwrite=yes *.inp 
  (Files WILL be overwritten without prompting the user)
Example 4:
  change_nlcomment -overwrite=yes `find . -name \\*.inp`
  (Files found by the "find" command will be overwritten without prompting the user)
'''

parser = argparse.ArgumentParser(description=description, \
  formatter_class=argparse.RawTextHelpFormatter, epilog=epilog)

help_overwrite = 'Overwrite input files (yes/no)? (If set, user will not be prompted for overwrite)'
help_nlfiles = 'One or more input namelist files in which to change the comment character.'

parser.add_argument('nlfiles', nargs='+', help=help_nlfiles)
parser.add_argument('-overwrite', help=help_overwrite)

args = parser.parse_args()

overwrite = ''
if args.overwrite: 
    overwrite = args.overwrite

if overwrite:
    if overwrite in ['yes', 'y']:
        print('Will overwrite input files.')
    else:
        print('Will NOT overwrite input files.')

nlfiles = args.nlfiles
print(f'There are {len(nlfiles)} input files.')

oldstr = ';'
newstr = '!'

for file in nlfiles:
    if os.path.isfile(file):
        if overwrite:
            if overwrite in ['yes', 'y']:
                replace_string(file, oldstr, newstr)
                print(f'Overwrote file {file}')
            else:
                newfile = file + '.new'
                shutil.copyfile(file, newfile)
                replace_string(newfile, oldstr, newstr)
                print(f'Wrote file {newfile}')
            continue

        answer = input(f'Overwrite file {file} (y/n/q, default=n)? ')
        if answer == 'q':
            sys.exit()
        elif answer == 'y':
            replace_string(file, oldstr, newstr)
            print(f'Overwrote file {file}')
        elif answer in ['n', '']:
            newfile = file + '.new'
            shutil.copyfile(file, newfile)
            replace_string(newfile, oldstr, newstr)
            print(f'Wrote file {newfile}')
        else:
            print(f'File {file} is unchanged.')

    else:
        print(f'>>> Cannot find file {file}')
