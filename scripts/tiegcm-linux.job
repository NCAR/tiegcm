#! /bin/csh
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#        USER EDIT SHELL VARIABLES for Linux job
#
 set model        = tiegcm_newbuild
 set wrkdir       = .
 set tgcmroot     = .
#
# Setup for 64-bit Linux MPI job (next 3 lines):
 set make_machine = Make.generic_hao64
 set mpi          = TRUE
 set nproc        = 8
#
# Setup for 32-bit Linux serial non-MPI job (next 2 lines):
#set make_machine = Make.generic_hao32
#set mpi          = FALSE
#
# Setup for 64-bit Linux serial non-MPI job (next 2 lines):
#set make_machine = Make.generic_dasg
#set mpi          = FALSE
#
 set mss          = TRUE
 set hres         = 5.0
 set vres         = 0.5
#set input        = tiegcm.inp
#set usr_srcdirs  = modsrc
#set output       = $model.out
#set tgcmdata     = $TGCMDATA
#set utildir      = $tgcmroot/$model/scripts
#set execdir      = $model-linux
#set debug        = FALSE
#
#             USER SHOULD NOT HAVE TO EDIT BELOW THIS LINE
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
set mycwd = `pwd`
echo " "
echo "${0}:"
echo "  Begin execution at `date`"
echo "  Current working directory: $mycwd"
echo "  System: `uname -a`"  
echo "  Log name: $LOGNAME"
set userguide = http://download.hao.ucar.edu/pub/tgcm/doc/userguide
#
# Model name is required:
#
if (! $?model) then
  echo "" ; echo ">>> Please set desired model (e.g., 'tiegcm' or 'timegcm')"
  echo "    See $userguide for more information."
  exit 1
endif
echo "  Model: $model"
#
if (! $?wrkdir) set wrkdir = `pwd`     # default working dir is cwd
if (! $?tgcmroot) set tgcmroot = $TGCMROOT
if (! $?tgcmdata) set tgcmdata = $TGCMDATA
if (! $?utildir) set utildir = $tgcmroot/$model/scripts
if (! $?make_machine) set make_machine = $utildir/Make.generic_hao64
if (! $?usr_srcdirs) set usr_srcdirs = ""
if (! $?hres) set hres = 5.0
if (! $?vres) set vres = 0.5
if (! $?mpi) set mpi = "TRUE"
if (! $?mss) set mss = ""
if (! $?debug) set debug = "FALSE"
if (! $?nproc) set nproc = 8
if ($mpi == FALSE) set nproc = 0
#
set wrkdir       = `perl $utildir/Abspath $wrkdir`
set utildir      = `perl $utildir/Abspath $utildir`
set srcdir       = `perl $utildir/Abspath $tgcmroot/$model/src`
if (! -e $make_machine && -e $utildir/$make_machine) set make_machine = $utildir/$make_machine
set make_machine = `perl $utildir/Abspath $make_machine`
if (! -e $make_machine) then
  echo ">>> Cannot find make_machine file $make_machine"
  exit 1
endif

@ i = 1
foreach dir ($usr_srcdirs)
  set abspath = `perl $utildir/Abspath $dir`
  set usr_srcdirs[$i] = $abspath
  @ i++
end

echo " "
echo "  Wrkdir       = $wrkdir"
echo "  Utildir      = $utildir"
echo "  Make_machine = $make_machine"
echo "  Srcdir       = $srcdir"
echo "  Usr_srcdirs  = $usr_srcdirs"
#
# Set exec directory if necessary (wrkdir/model-os):
#
if (! $?execdir) then
  set os = `uname -s | tr "[A-Z]" "[a-z]"`
  set execdir = $wrkdir/$model-$os
endif
set execdir = `perl $utildir/Abspath $execdir`  # full path to execdir
if (! -d $execdir) mkdir $execdir
echo "  Execdir = $execdir"
#
# Copy Makefile and make_machine file to execdir, if they are not already there. 
# (Note $make_machine:t returns the file name of the full path $make_machine)
#
if (! -e $execdir/$make_machine:t) cp $make_machine $execdir
if (! -e $execdir/Makefile) cp $utildir/Makefile $execdir
cp $utildir/Mkdepends $execdir
#
# Make default namelist input if not provided by user:
#
if (! $?input) then
  set input = \
    `perl $utildir/Mknamelist -model=$model -hres=$hres -vres=$vres` || \
     echo "${0}: Error from Mknamelist: fileout = $input" && exit 1
  echo "Made default namelist input file $input" 
else
  echo "Using user provided namelist input file $input"
endif
set namelist = `perl $utildir/Abspath $input`
if (! -e $namelist) then
  echo "${0}: Cannot find namelist input file $namelist" && exit 1
endif
#
# Default stdout file is $model.out in the wrkdir:
#
if (! $?output) then
  set output = $wrkdir/$model.out
else
  set output = `perl $utildir/Abspath $wrkdir/$output`
endif
#
# Build model in execdir:
#
cd $execdir || echo ">>> Cannot cd to execdir $execdir" && exit 1
echo "" ; echo "Begin building $model in `pwd` at `date`..."
#
# Copy defs header file to execdir according to requested resolution:
#
if (! -e defs.h) then
  if ($hres == 5.0) then
    cp $srcdir/defs.5.0 $execdir/defs.h
  else if ($hres == 2.5) then
    cp $srcdir/defs.2.5 $execdir/defs.h
  else
    echo ">>> Unknown hres: $hres (must be either 5.0 or 2.5)" && exit 1
  endif
endif
#
# Build Make.env file in exec dir, containing needed env vars for Makefile:
#
cat << EOF >! Make.env
MAKE_MACHINE = $make_machine:t
DIRS         = . $usr_srcdirs $srcdir 
MPI          = $mpi
EXECNAME     = $model
DEBUG        = $debug
EOF
#
# Build the model:
#
gmake -j4 || echo ">>> Error return from gmake" && exit 1
#
if (-e dispose.csh) then
  echo "Removing dispose.csh prior to execution."
  /bin/rm dispose.csh || echo "WARNING: error removing dispose.csh"
endif
#
echo "Model output will go to $output"
echo "Linux job: mpi=$mpi nproc=$nproc"
#
# Execute Linux mpi job:
# (first create machines.ini file)
#
if ($mpi == TRUE) then
  echo `hostname`  >!  machines.ini
  @ i = 1
  while ($i < $nproc)
    echo i = $i  nproc = $nproc
    echo `hostname` >> machines.ini
    @ i++
  end
  echo "Executing mpirun -np $nproc for Linux MPI run."
  mpirun -np $nproc -machinefile machines.ini $execdir/$model < $namelist >&! $output || \
    echo ">>> ${0} mpirun execution of $execdir/$model FAILED at `date`" && \
    echo "See output in $output"
  echo "Linux MPI run of $model completed at `date`"
#
# Execute linux non-mpi job:
#
else
  echo "Executing $model for Linux non-MPI run."
  $execdir/$model < $namelist >&! $output || \
    echo ">>> ${0} Execution of $execdir/$model FAILED at `date`" && \
    echo "See output in $output"
  echo "Linux non-MPI run of $model completed at `date`"
endif
#
# Separate output files by MPI task:
# (we are still in $execdir, but $output contains full path to $wrkdir)
#
perl $utildir/Mklogs $output || \
  echo ">>> ${0}: Error from $execdir/Mklogs on output $output"
#
# Execute dispose.csh, if it exists:
# This script was created by the model to dispose history files
#   to the mss if model namelist DISPOSE=2.
#
if (-e dispose.csh) then
  echo "" ; echo "Contents of dispose.csh: " ; cat $execdir/dispose.csh ; echo ""
  echo "Starting dispose.csh in background.."
  dispose.csh &
endif
#
cd $mycwd # return to original cwd
echo "" ; echo "${0}: Completed execution at `date`"
exit 0 
