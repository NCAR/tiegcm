#!/usr/bin/env python3
import os, sys

# This script processes MPI stdout log files. Each line in the log file may 
# be associated with one or more MPI tasks. The script splits the lines from 
# the original log file into separate files, each containing output from a 
# specific MPI task.

def make_taskfile(filename, proc):
    """Generate a task-specific filename based on the given MPI task number."""
    dot = '.'
    parts = filename.split(dot)
    parts.pop(len(parts)-1)
    fileroot = dot.join(parts)
    
    # Format process number to have leading zeros
    if proc < 10:
        procnum = '000' + str(proc)
    elif proc < 100:
        procnum = '00' + str(proc)
    elif proc < 1000:
        procnum = '0' + str(proc)
    else:
        procnum = str(proc)

    # Return the new task-specific filename
    taskfile = fileroot + '_task' + procnum + '.out'
    return taskfile

# Check for command line arguments
if len(sys.argv) == 1:
    print('mklogs: Need at least one file argument.')
    sys.exit()

# Process each file passed as an argument
for arg in sys.argv[1:]:
    filename = arg
    if not os.path.isfile(filename):
        print(f'>>> mklogs: Could not open file {filename}')
        continue

    # Read the file and strip unnecessary whitespaces
    with open(filename, 'r') as f:
        print(f'mklogs: Extracting log files from {filename}')
        lines = f.readlines()
        lines = [line.rstrip() for line in lines]

    # List to store the MPI tasks associated with each line
    proclist = []
    maxproc = -1  # Track the highest task number
    for line in lines:
        line_parts = line.split(':')
        procs = line_parts[0]
        procs = procs.split(',')
        plist = []

        # Process the MPI tasks string, which could be individual numbers or ranges
        for string in procs:
            if '-' not in string:  # Single MPI task
                plist.append(string)
            else:  # Range of MPI tasks
                list_range = string.split('-')
                try:
                    start = int(list_range[0])
                    end = int(list_range[1])
                except ValueError:
                    continue
                # Add each task in the range to the list
                for proc in range(start, end + 1):
                    plist.append(str(proc))

            # Update the highest task number found
            for proc in plist:
                try:
                    val = int(proc)
                except ValueError:
                    continue
                if val > maxproc:
                    maxproc = val

        # Store the list of MPI tasks for this line
        proclist.append(plist)

    # Create a new file for each MPI task
    files = []
    for nproc in range(maxproc + 1):
        taskfile = make_taskfile(filename, nproc)
        files.append(open(taskfile, 'w'))

    # Distribute lines from the original file to the task-specific files
    for idx, line in enumerate(lines):
        line_parts = line.split(':')
        for proc in proclist[idx]:
            try:
                val = int(proc)
            except ValueError:
                continue
            string = ''.join(line_parts[1:])
            files[val].write(string + '\n')

    # Close all the task-specific files
    for file in files:
        file.close()
